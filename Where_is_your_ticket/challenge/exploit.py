from hashpumpy import hashpump
from pwn import *
from binascii import hexlify, unhexlify
from Crypto.Cipher import AES
from hashlib import md5

r = remote("localhost", 5000)
r.recvuntil(b'Encrypted: ')
enc_role = unhexlify(r.recvuntil(b'\n').strip(b'\n'))

print(f"Enc Data: {hexlify(enc_role).decode('utf-8')}")

payload = f"name=player101&role={hexlify(enc_role).decode('utf-8')}"
print(f"Payload: {payload}")

r.sendlineafter(b"Your choice: ", b'3')
r.sendlineafter(b"Your data: ", payload.encode())
r.recvuntil(b'Hash: ')
sign = r.recvuntil(b'\n').strip(b'\n')
print(f"Hash   : {sign.decode()}\n")
payload_36 = "\x36"*64 + f"name=player101&role={hexlify(enc_role).decode('utf-8')}"
print(f"Payload_36: {payload_36}")

r.sendlineafter(b"Your choice: ", b'3')
r.sendlineafter(b"Your data: ", payload_36.encode())
r.recvuntil(b'Hash: ')
sign_36 = r.recvuntil(b'\n').strip(b'\n')
print(f"Hash_36 : {sign_36.decode()}\n")
xor_a = xor(b'guest', b'royal')
bitflip = xor(xor_a, enc_role[:5]) + enc_role[5:]
print(f"Original enc: {hexlify(enc_role).decode('utf-8')}")
print(f"Flipped enc : {hexlify(bitflip).decode('utf-8')}")

new_payload = b'&role=' + hexlify(bitflip)
new_key, new_msg = hashpump(sign_36, payload_36[64:].encode('utf-8'), new_payload, 64)
print(f"New hash: {new_key}")
print(f"New payload: {new_msg}\n")
payload_5c = b"\x5c"*64 + unhexlify(new_key)
print(f"Payload_5c: {payload_5c}")

r.sendlineafter(b"Your choice: ", b'3')
r.sendlineafter(b"Your data: ", payload_5c)
r.recvuntil(b'Hash: ')
sign_5c = r.recvuntil(b'\n').strip(b'\n')
print(f"Hash_5c : {sign_5c.decode()}\n")
final_payload = b"%s&sign=%s"%(new_msg, sign_5c)
print(f"Final payload: {final_payload}")

r.sendlineafter(b"Your choice: ", b'1')
r.sendlineafter(b"Your data: ", final_payload)
print(r.recvuntil(b'Your role:').strip(b'\nYour role:'))